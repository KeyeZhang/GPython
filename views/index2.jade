doctype html
html
  head
    meta(charset='UTF-8')
    style.
      .myholder {
      width: 800px;
      height: 800px;
      border-top: 2px solid black;
      border-bottom: 2px solid black;
      }
    title GPython
    link(rel='stylesheet', type='text/css', href='/stylesheets/joint.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/mycss.css')
    script(src='/javascripts/jquery.min.js')
    script(src='/javascripts/lodash.min.js')
    script(src='/javascripts/backbone-min.js')
    script(src='/javascripts/joint.js')
    script(src='/javascripts/joint.shapes.devs.js')
  body
    .head
      .fonts
        p
          | This is an interactive graphing tool for running Python scripts and analyzing data
    .container
      .col
        .col1
          form(name='python', method='POST')
            input(type='submit', value='Run a single cell', class = 'button')
          form(method='POST', action='/file_upload', enctype='multipart/form-data')
            label.custom-file-upload(for='file-upload')
              p( class = 'choose')
                | Choose your file
              input#file-upload(type='file', name = 'foo' style='display:none;')

            //- input(type='file', name='foo', size='50' )
            input(type='submit', value='Upload File' class = 'button'  onclick = 'seek();')
            span #{message}
          form(action='/index', method='POST', name='hello', onsubmit='savejson();')
            | Paste your JSON file here: 
            input#hh(type='text', name='JSON file')
            input(type='submit', name='Run', value='Run', class = 'button' )
            p
              | Click on the paper below to create a cell, right click to delete the cell. Click Run to run your graph, or you can paste the json file of a graph above and run that graph.
          form(action = "javascript:gJ();")
            input(type ="submit" value ='Run' class = 'button')
        .col2
          form(action = "javascript:show();")
            input(id = 'hahaha', type = 'submit', name = 'why2', value = 'show the summary of the dataset', class = 'button')
          .helo
            | The data summary will be shown here
          .dropDown(style= dropstyle)
            form(name = 'drop',method = 'POST', action = '/sharp')
              select(multiple='' style = 'height:100px;' id ='selection' name = 'bar')

              input(type='submit')
          form(action = "javascript:createdataCell();")
            input(type = 'submit', name = 'hahahaha', value = 'create a data cell', class = 'button2')
          form()
            input(type = 'submit', name = 'ha', value = 'create an output cell', class = 'button3')
          span(id = 'infodata')  #{datainfo} 

        script. 
          function seek(){
            $('#hahaha').show();
          }
          function show(){
            $.post("/show_summary", function(data, status){
              //- $('.helo').text(data);
              console.log(data);
              const str = data.split(',');
              console.log(str[0]);
              $('.helo').css('color','black');
              $('.helo').css('font-size', '20px');
              var select = document.getElementById('selection');
              for (let i = 0; i < str.length; i++ ){
                $('#selection').append($('<option>', {text: str[i], value: str[i]}));
                //- select.options[i].text = str[i];
                //- console.log(str[i]);
              }
              //- $('.helo').css('border','2px solid black');
              $('.dropDown').show();
            
            });
          }
      script.
        function changeval(){
        var a = prompt("enter the link name");
        document.getElementById('links').value = a;
        console.log(document.getElementById('links').value);
        } 
      .col3
        #paper.paper
          #myholder
          script.
            var graph = new joint.dia.Graph;
            var paper = new joint.dia.Paper({
            el: $('#paper'),
            width: 660, height: 800, gridSize: 1,
            model: graph,
            background: {
            color: '#e6e6e6'
            },
            defaultLink: new joint.dia.Link({
            attrs: { '.marker-target': { d: 'M 10 0 L 0 5 L 10 10 z' }},
            type: 'link',
            labels: [{ position: .5, attrs: {
            text: { text: "default"}}}],
            }),
            validateConnection: function(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {
            // Prevent linking from input ports.
            if (magnetS && magnetS.getAttribute('type') === 'input') return false;
            // Prevent linking from output ports to input ports within one element.
            if (cellViewS === cellViewT) return false;
            // Prevent linking to input ports.
            return magnetT && magnetT.getAttribute('type') === 'input';
            },
            // validateMagnet: function(cellView, magnet) {
            //     // Note that this is the default behaviour. Just showing it here for reference.
            //     // Disable linking interaction for magnets marked as passive (see below `.inPorts circle`).
            //     return magnet.getAttribute('magnet') !== 'passive';
            // }
            validateConnection: function(sourceView, sourceMagnet, targetView, targetMagnet) {
            return sourceMagnet != targetMagnet;
            }
            });


            function createdataCell(){
            //- document.drop.submit();
            var st = document.getElementById('infodata').innerHTML;
            console.log(st);
            console.log(st.innerHTML);
            const name  = prompt("please enter the name of the node");
            document.python.action = name;
            console.log("had found");
            var cell = new joint.shapes.devs.Model({
            position:{x:250, y:300},
            size: {width: 80, height: 80},
            inPorts: ['in1'],
            type: 'cell',
            outPorts: ['out1'],
            attrs: {
            '.label': {text: name, 'ref-x':.4, 'ref-y': .2},
            '.inPorts circle': { fill: '#16A085', type: 'input' },
            rect: {fill: 'green'},
            '.outPorts circle': { fill: '#E74C3C', type: 'output' }
            }
            });
            graph.addCell(cell);
            }





            paper.on('blank:pointerclick', function(element, ev, x,y){
            const name  = prompt("please enter the name of the node");
            document.python.action = name;
            console.log("had found");
            var cell = new joint.shapes.devs.Model({
            position:{x:250, y:300},
            size: {width: 80, height: 80},
            inPorts: ['in1'],
            type: 'cell',
            outPorts: ['out1'],
            attrs: {
            '.label': {text: name, 'ref-x':.4, 'ref-y': .2},
            '.inPorts circle': { fill: '#16A085', type: 'input' },
            rect: {fill: 'green'},
            '.outPorts circle': { fill: '#E74C3C', type: 'output' }
            }
            });
            graph.addCell(cell);
            console.log("ll");
            console.log(cell.prop('attrs')['.label'].text);
            });
            paper.on('cell:pointerclick', function(element, ev, x,y){
            var cell = element.model;
            //- console.log(cell.get('attrs')['.label'] == undefined);
            if (cell.get('attrs')['.label'] != undefined){
            const string = cell.prop('attrs')['.label'].text;
            document.python.action = string;
            document.python.submit();
            }
            else {
            var text2 = prompt("please enter the link's name")
            cell.prop('labels/0/attrs/text/text', text2);
            }
            });
            paper.on('cell:pointerdblclick', function(element, ev, x, y){
            var cell = element.model;
            const string = cell.prop('attrs')['.label'].text;
            $.ajax({
            type: "POST",
            dataType: "text",
            url: "/show",
            data: string
            });
            });
            paper.on('cell:contextmenu', function(element, ev, x, y){
            var cell = element.model;
            element.remove();
            });
            function savejson(){
            console.log(graph);
            var jSon = JSON.stringify(graph);
            console.log(jSon);
            document.getElementById('hh').value = jSon;
            // $.ajax({
            //   type: "POST",
            //   dataType: "json",
            //   url: "/index",
            //   data:jSon,
            //   error: function(xhr, desc, err){
            //     alert("error");
            //   }
            // });
            }

            function gJ(){
              var j = JSON.stringify(graph);
              console.log(j);
              console.log(typeof(j));
              var str = "hello, my name is Bowen";
              $.ajax({
                type:'POST',
                //- contentType: 'string',
                dataType:'text',
                url:'/shishi',
                data: {'haha':j},
                success :function(msg){
                  const str = msg.split(',')
                  str1 = str[0];
                  str2 = str[1];
                  //alert(JSON.stringify(msg));
                  $('#xiaoshabi').text(str1);
                  $('.sdf').attr('src', str2);
                  $('.sdf').attr('width','300');
                  $('.sdf').attr('height','300');
                }

              });
            }
      .col4
        p #{output}
        p#xiaoshabi The output of the Python scripts will be displayed here
        img.sdf
        img(src = path3 width = '300' height = '300')

      .footer
        form(action = "javascript:gJ();")
          input(type ="submit")
        p  Special Thanks: Dr. Matias Carrasco Kind
        p  Authors: Bowen Song, Jiayin Lu, Yijia Qian, Dinyang Chen
        p  We are math students from UIUC
